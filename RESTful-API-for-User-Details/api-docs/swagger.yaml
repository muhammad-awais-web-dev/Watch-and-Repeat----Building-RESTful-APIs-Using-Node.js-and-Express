swagger: "2.0"
info:
  description: "This is a RESTful API for managing user details."
  version: "1.0.0"
  title: "User Details API"
host: "localhost:3000"
basePath: "/api/v1"
schemes:
  - "http"
consumes:
  - "application/json"
produces:
  - "application/json"
paths:
  /users:
    get:
      summary: "Get all users"
      description: "Retrieve a list of all users."
      responses:
        200:
          description: "A list of users."
          schema:
            type: "object"
            properties:
              status:
                type: "string"
                example: "OK"
              data:
                type: "array"
                items:
                  $ref: "#/definitions/User"
    post:
      summary: "Create a new user"
      description: "Add a new user to the system."
      parameters:
        - in: "body"
          name: "body"
          description: "User object that needs to be added"
          required: true
          schema:
            $ref: "#/definitions/UserInput"
      responses:
        201:
          description: "User created successfully."
          schema:
            type: "object"
            properties:
              status:
                type: "string"
                example: "Created"
              data:
                $ref: "#/definitions/User"
        400:
          description: "Bad request - validation error"
          schema:
            type: "object"
            properties:
              error:
                type: "string"
  /users/{userId}:
    get:
      summary: "Get user by ID"
      description: "Retrieve details of a specific user by their ID."
      parameters:
        - name: "userId"
          in: "path"
          required: true
          type: "integer"
          description: "ID of the user to retrieve"
      responses:
        200:
          description: "User details retrieved successfully."
          schema:
            type: "object"
            properties:
              status:
                type: "string"
                example: "OK"
              data:
                $ref: "#/definitions/User"
        404:
          description: "User not found."
    put:
      summary: "Update user by ID"
      description: "Update the username of a specific user by their ID."
      parameters:
        - name: "userId"
          in: "path"
          required: true
          type: "integer"
          description: "ID of the user to update"
        - in: "body"
          name: "body"
          description: "Updated user object containing userName"
          required: true
          schema:
            type: "object"
            required:
              - "userName"
            properties:
              userName:
                type: "string"
                description: "New username for the user"
                example: "John Updated"
      responses:
        200:
          description: "User updated successfully."
          schema:
            type: "object"
            properties:
              status:
                type: "string"
                example: "OK"
              data:
                type: "string"
                example: "Successfully updated user details"
        404:
          description: "User not found."
        400:
          description: "Bad request"
    delete:
      summary: "Delete user by ID"
      description: "Remove a specific user by their ID."
      parameters:
        - name: "userId"
          in: "path"
          required: true
          type: "integer"
          description: "ID of the user to delete"
      responses:
        204:
          description: "User deleted successfully."
        404:
          description: "User not found."
          schema:
            type: "object"
            properties:
              error:
                type: "string"
definitions:
  User:
    type: "object"
    properties:
      userId:
        type: "integer"
        description: "Unique identifier for the user"
        example: 1
      userName:
        type: "string"
        description: "Name of the user"
        example: "JohnDoe"
  UserInput:
    type: "object"
    required:
      - "userName"
    properties:
      userName:
        type: "string"
        description: "Name of the user"
        example: "JohnDoe"